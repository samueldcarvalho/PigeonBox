// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PigeonBox.Infrastructure.DataContexts;

namespace PigeonBox.Infrastructure.Migrations
{
    [DbContext(typeof(PigeonBoxContext))]
    partial class PigeonBoxContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasCharSet("latin1", DelegationModes.ApplyToDatabases)
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("PigeonBox.Domain.Chats.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("AlteredAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("altered_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("Description")
                        .HasColumnType("BLOB")
                        .HasColumnName("description");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("removed");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<Guid>("UniqueIdentifier")
                        .HasColumnType("char(36)")
                        .HasColumnName("unique_identifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_chat");

                    b.HasIndex("UniqueIdentifier")
                        .IsUnique()
                        .HasDatabaseName("ix_chat_unique_identifier");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_chat_user_id");

                    b.ToTable("chat");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlteredAt = new DateTime(2022, 8, 9, 20, 30, 34, 94, DateTimeKind.Local).AddTicks(3304),
                            CreatedAt = new DateTime(2022, 8, 9, 20, 30, 34, 95, DateTimeKind.Local).AddTicks(3486),
                            Description = new byte[] { 87, 101, 108, 99, 111, 109, 101, 32, 116, 111, 32, 80, 105, 103, 101, 111, 110, 98, 111, 120, 33, 32, 84, 104, 105, 115, 32, 111, 110, 101, 32, 97, 32, 103, 108, 111, 98, 97, 108, 32, 99, 104, 97, 116, 44, 32, 102, 111, 114, 32, 101, 118, 101, 114, 121, 32, 80, 105, 103, 101, 111, 110, 32, 105, 110, 32, 116, 104, 105, 115, 32, 98, 111, 120, 46, 32, 66, 101, 32, 114, 101, 115, 112, 101, 99, 116, 102, 117, 108, 33, 32, 65, 116, 116, 46, 46, 32, 83, 97, 109, 117, 101, 108, 32, 61, 41, 32 },
                            Removed = false,
                            Title = "#Everyone",
                            UniqueIdentifier = new Guid("caba697b-b17f-459c-a81a-2d29cde5af45"),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("PigeonBox.Domain.Messages.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("AlteredAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("altered_at");

                    b.Property<int>("ChatId")
                        .HasColumnType("int")
                        .HasColumnName("chat_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_at");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("removed");

                    b.Property<bool>("Sent")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("sent");

                    b.Property<DateTime>("SentAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("sent_at");

                    b.Property<byte[]>("Text")
                        .HasColumnType("BLOB")
                        .HasColumnName("text");

                    b.Property<Guid>("UniqueIdentifier")
                        .HasColumnType("char(36)")
                        .HasColumnName("unique_identifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_message");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_message_chat_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_message_user_id");

                    b.ToTable("message");
                });

            modelBuilder.Entity("PigeonBox.Domain.Notifications.ChatNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("AlteredAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("altered_at");

                    b.Property<int>("ChatId")
                        .HasColumnType("int")
                        .HasColumnName("chat_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_at");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("removed");

                    b.Property<bool>("Sent")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("sent");

                    b.Property<DateTime>("SentAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("sent_at");

                    b.Property<string>("Text")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_chat_notification");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_chat_notification_chat_id");

                    b.ToTable("chat_notification");
                });

            modelBuilder.Entity("PigeonBox.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("AlteredAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("altered_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("removed");

                    b.Property<string>("Username")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_user_username");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlteredAt = new DateTime(2022, 8, 9, 20, 30, 34, 181, DateTimeKind.Local).AddTicks(4796),
                            CreatedAt = new DateTime(2022, 8, 9, 20, 30, 34, 181, DateTimeKind.Local).AddTicks(4818),
                            Email = "admin@admin.com",
                            Name = "Administrador",
                            Password = "asd123",
                            Removed = false,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("PigeonBox.Domain.Users.UserConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("AlteredAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("altered_at");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("connection_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_connected");

                    b.Property<DateTime>("LastConnectionAt")
                        .HasPrecision(0)
                        .HasColumnType("datetime(0)")
                        .HasColumnName("last_connection_at");

                    b.Property<bool>("Removed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("removed");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_connection");

                    b.HasIndex("ConnectionId")
                        .HasDatabaseName("ix_user_connection_connection_id");

                    b.HasIndex("IsConnected")
                        .HasDatabaseName("ix_user_connection_is_connected");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_connection_user_id");

                    b.ToTable("user_connection");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlteredAt = new DateTime(2022, 8, 9, 20, 30, 34, 102, DateTimeKind.Local).AddTicks(8415),
                            ConnectionId = "",
                            CreatedAt = new DateTime(2022, 8, 9, 20, 30, 34, 102, DateTimeKind.Local).AddTicks(8439),
                            IsConnected = false,
                            LastConnectionAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Removed = false,
                            Status = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("join_chats_users", b =>
                {
                    b.Property<int>("ChatId")
                        .HasColumnType("int")
                        .HasColumnName("chat_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ChatId", "UserId")
                        .HasName("pk_join_chats_users");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_join_chats_users_user_id");

                    b.ToTable("join_chats_users");
                });

            modelBuilder.Entity("PigeonBox.Domain.Chats.Chat", b =>
                {
                    b.HasOne("PigeonBox.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_chat_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PigeonBox.Domain.Messages.Message", b =>
                {
                    b.HasOne("PigeonBox.Domain.Chats.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .HasConstraintName("fk_message_chat_chat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PigeonBox.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_message_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PigeonBox.Domain.Notifications.ChatNotification", b =>
                {
                    b.HasOne("PigeonBox.Domain.Chats.Chat", "Chat")
                        .WithMany("ChatNotifications")
                        .HasForeignKey("ChatId")
                        .HasConstraintName("fk_chat_notification_chat_chat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("PigeonBox.Domain.Users.UserConnection", b =>
                {
                    b.HasOne("PigeonBox.Domain.Users.User", "User")
                        .WithOne("UserConnection")
                        .HasForeignKey("PigeonBox.Domain.Users.UserConnection", "UserId")
                        .HasConstraintName("fk_user_connection_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("join_chats_users", b =>
                {
                    b.HasOne("PigeonBox.Domain.Chats.Chat", null)
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .HasConstraintName("fk_join_chats_users_chat_chat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PigeonBox.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_join_chats_users_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PigeonBox.Domain.Chats.Chat", b =>
                {
                    b.Navigation("ChatNotifications");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("PigeonBox.Domain.Users.User", b =>
                {
                    b.Navigation("UserConnection");
                });
#pragma warning restore 612, 618
        }
    }
}
